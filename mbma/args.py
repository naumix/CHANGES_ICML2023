import argparse
import os
from distutils.util import strtobool

def parse_args():
    # fmt: off
    parser = argparse.ArgumentParser()
    parser.add_argument("--exp-name", type=str, default=os.path.basename('test').rstrip(".py"), help="the name of this experiment")
    parser.add_argument("--gym-id", type=str, default="cheetah", help="the id of the gym environment")
    parser.add_argument("--task_name", type=str, default="run", help="the id of the gym environment")
    parser.add_argument("--action_repeat", type=int, default=4)
    parser.add_argument('--normalize_rewards', default=True, action='store_true')
    parser.add_argument('--normalize_states', default=False, action='store_true')
    parser.add_argument('--simple_logstd', default=True, action='store_true')
    parser.add_argument("--horizon", type=int, default=8)
    parser.add_argument("--buffer_size", type=int, default=200000)
    parser.add_argument("--wm_init_steps", type=int, default=40000)
    parser.add_argument("--action_samples", type=int, default=8)
    parser.add_argument("--experiment_repeats", type=int, default=5)
    parser.add_argument("--wm_batch_size", type=int, default=128)
    parser.add_argument("--learning_rate", type=float, default=0.0003, help="the learning rate of the optimizer")
    parser.add_argument("--wm_learning_rate", type=float, default=3e-4, help="the learning rate of the optimizer")
    parser.add_argument("--anneal_limit", type=float, default=0.15, help="the learning rate of the optimizer")
    parser.add_argument("--seed", type=int, default=1,help="seed of the experiment")
    parser.add_argument("--total_timesteps", type=int, default=1000000, help="total timesteps of the experiments")
    parser.add_argument("--torch-deterministic", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True, help="if toggled, `torch.backends.cudnn.deterministic=False`")
    parser.add_argument("--cuda", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=True, help="if toggled, cuda will be enabled by default")
    parser.add_argument("--track", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=True, help="if toggled, this experiment will be tracked with Weights and Biases")
    parser.add_argument("--wandb-project-name", type=str, default="ppo-implementation-details", help="the wandb's project name")
    parser.add_argument("--wandb-entity", type=str, default=None, help="the entity (team) of wandb's project")
    parser.add_argument("--capture-video", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=True, help="weather to capture videos of the agent performances (check out `videos` folder)")
    # Algorithm specific arguments
    parser.add_argument("--num-envs", type=int, default=1, help="the number of parallel game environments")
    parser.add_argument("--hidden_dim", type=int, default=512)
    parser.add_argument("--num-steps", type=int, default=2048, help="the number of steps to run in each environment per policy rollout")
    parser.add_argument("--anneal-lr", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True, help="Toggle learning rate annealing for policy and value networks")
    parser.add_argument("--anneal_ratio", type=float, default=1, help="the number of steps to run in each environment per policy rollout")
    parser.add_argument("--gae", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True, help="Use GAE for advantage computation")
    parser.add_argument("--gamma", type=float, default=0.99, help="the discount factor gamma")
    parser.add_argument("--gae-lambda", type=float, default=0.95, help="the lambda for the general advantage estimation")
    parser.add_argument("--num-minibatches", type=int, default=32, help="the number of mini-batches")
    parser.add_argument("--update-epochs", type=int, default=10, help="the K epochs to update the policy")
    parser.add_argument('--norm_adv', default=False, action='store_true')

    parser.add_argument("--clip-coef", type=float, default=0.2, help="the surrogate clipping coefficient")
    parser.add_argument("--clip-vloss", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True, help="Toggles whether or not to use a clipped loss for the value function, as per the paper.")
    parser.add_argument("--ent-coef", type=float, default=0.0, help="coefficient of the entropy")
    parser.add_argument("--vf-coef", type=float, default=0.5, help="coefficient of the value function")
    parser.add_argument("--max-grad-norm", type=float, default=0.5, help="the maximum norm for the gradient clipping")
    parser.add_argument("--target-kl", type=float, default=None, help="the target KL divergence threshold")
    parser.add_argument("--rpo-alpha", type=float, default=0.0,help="the alpha parameter for RPO")
    parser.add_argument("--reset_freq", type=int, default=1000000,help="the alpha parameter for RPO")
    args = parser.parse_args()
    args.batch_size = int(args.num_envs * args.num_steps)
    args.minibatch_size = int(args.batch_size // args.num_minibatches)
    # fmt: on
    return args